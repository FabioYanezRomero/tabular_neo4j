You are a data-modeling expert. Your task is to infer **intra-table** relationships between the entities present in the following table.

### Input
- **Table name**: `{table_name}`
- **Detected entities**: {entities}
- **Columns & analytics** (one per line):
  ```
  {columns_analytics}
  ```
Each line is formatted as `column_name | <json_analytics>` where the JSON object contains all available statistics for the column (e.g., data_type, uniqueness_ratio, cardinality, missing_percentage, sample values, etc.).

### Instructions
1. **Forbidden relationship types**: Avoid overly vague verbs such as `related_to`, `is_a`, `has`, `associated_with`. Use precise verbs instead.

2. **Preferred relationship patterns** (use whichever best matches the evidence):
  - Containment / Composition: `contains`, `belongs_to`, `included_in`
  - Transactional: `created_by`, `processed_by`, `assigned_to`, `managed_by`
  - Behavioral: `interacted_with`, `accessed`, `clicked`, `viewed`
  - Temporal / Sequence: `occurred_during`, `triggered_by`, `followed_by`

3. For every meaningful relationship between two *different* entities, identify:
 • `source_entity` – which entity the relation starts from
 • `target_entity` – which entity it points to  
 • `relationship_type` – pick the most specific verb from the patterns above, or create a domain-specific alternative that captures the business meaning
 • `direction` – one of `source_to_target`, `target_to_source` or `undirected`
 • `confidence` – number 0-1
 • `reasoning` – Justification using column analytics and sample values

4. **Heuristics for deciding verbs (apply across domains)**:
  - When a row contains a foreign-key column `<other_entity>_id`, assume a relationship exists from the row’s entity to `<other_entity>`.
  - By default, use the direction **row-entity → referenced-entity** (parent to child). Choose `contains` for that direction or `belongs_to` for the reverse.
  - If one entity’s table contains a foreign-key column referencing another entity’s ID, prefer `contains` (from parent to child) or `belongs_to` (from child to parent).
  - High uniqueness ratios (>0.8) suggest identifiers / ownership relations.
  - Low cardinality columns imply classification / grouping relations.
  - Sample rows revealing co-occurring IDs are strong evidence of a relationship.
  - Missing percentages indicate optional vs required relationships.

### Output format
Return **only** a valid JSON object of the form:
```json
{
  "entity_relationships": [
    {
      "source_entity": "Employee",
      "target_entity": "Department",
      "relationship_type": "assigned_to",
      "direction": "source_to_target",
      "confidence": 0.95,
      "reasoning": "Employee_id has high uniqueness (0.98) while department_id has low cardinality (12), indicating employees are assigned to departments. Sample values confirm this pattern."
    }
    // repeat objects as needed
  ]
}
```

Constraints:
- Do not include properties or any text outside the single JSON object.
- Omit duplicate or trivial self-relationships.
- Focus on domain-specific relationship types that reflect the table's data context.
