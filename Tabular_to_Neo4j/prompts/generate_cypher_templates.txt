Your task is to generate template Cypher queries for a Neo4j graph model based on Entity-Relation-Entity triples. You will receive information about entities with their properties and the relationships between them.

METADATA:
- Entities: {entities}
- Relationships: {relationships}

CRITICAL REQUIREMENTS:
1. EVERY entity node MUST have a 'uuid' property generated with randomUUID()
2. This UUID must be used as the primary identifier for all entities
3. Create a uniqueness constraint on the uuid property for each entity
4. All relationships MUST use these UUIDs to connect entities

Generate the following Cypher templates:

1. CONSTRAINTS: Create a uniqueness constraint for each entity's uuid property

2. ENTITY CREATION: For each entity type, create a template to:
   - Generate a UUID
   - Create the entity with its properties

3. RELATIONSHIP CREATION: For each relationship in the format (EntityA)-[RELATION]->(EntityB), create a template to:
   - Match the source and target entities by their UUIDs
   - Create the relationship between them

4. QUERY EXAMPLES: Simple queries to retrieve entities and follow relationships

EXAMPLES:

1. CONSTRAINTS:
```cypher
// Create uniqueness constraint for Person entity
CREATE CONSTRAINT ON (p:Person) ASSERT p.uuid IS UNIQUE;

// Create uniqueness constraint for Product entity
CREATE CONSTRAINT ON (p:Product) ASSERT p.uuid IS UNIQUE;
```

2. ENTITY CREATION:
```cypher
// Create Person entities with UUIDs
MERGE (p:Person {uuid: randomUUID(), name: $name, age: $age})

// Create Product entities with UUIDs
MERGE (p:Product {uuid: randomUUID(), name: $productName, price: $price})
```

3. RELATIONSHIP CREATION:
```cypher
// Create PURCHASED relationship between Person and Product
MATCH (person:Person {uuid: $personUuid})
MATCH (product:Product {uuid: $productUuid})
CREATE (person)-[:PURCHASED {date: $date}]->(product)
```

4. QUERY EXAMPLES:
```cypher
// Find all Products purchased by a specific Person
MATCH (p:Person {name: $name})-[:PURCHASED]->(product:Product)
RETURN product.name, product.price

// Find all Persons who purchased a specific Product
MATCH (person:Person)-[:PURCHASED]->(p:Product {name: $productName})
RETURN person.name
```

Ensure all entities have UUIDs and all relationships use these UUIDs to connect entities.

Return your Cypher templates as JSON with the following structure:
{
    "cypher_templates": [
        {
            "purpose": "...",
            "query": "...",
            "description": "..."
        },
        ...
    ],
    "constraints_and_indexes": [
        {
            "type": "CONSTRAINT" | "INDEX",
            "entity_type": "...",
            "property": "...",
            "query": "..."
        },
        ...
    ]
}

JSON response:
